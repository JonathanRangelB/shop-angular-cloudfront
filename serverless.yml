# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: shop-angular-cloudfront
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs16.x
  ## this is my personal AWS account. This must be skipped in you serverless.yml
  # profile: personalAccount

  # you can overwrite defaults here
  stage: dev
  region: us-east-2

  environment:
    PRODUCTS_TABLE: products
    STOCKS_TABLE: stocks
    BUCKET_DATA_NAME: ${self:custom.s3BucketName}-data
    REGION: ${self:provider.region}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: "arn:aws:dynamodb:us-east-2:904597884993:table/products"
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: "arn:aws:dynamodb:us-east-2:904597884993:table/stocks"
        - Effect: Allow
          Action:
            - s3:ListBucket
          Resource: "arn:aws:s3:::shop-angular-cloudfront3850-data"
        - Effect: Allow
          Action:
            - s3:*
          Resource: "arn:aws:s3:::shop-angular-cloudfront3850-data/*"
        - Effect: Allow
          Action:
            - sqs:*
          Resource: "arn:aws:sqs:us-east-2:904597884993:catalogItemsQueue"
        - Effect: Allow
          Action:
            - "sns:*"
          Resource: "*"

plugins:
  - serverless-auto-swagger
  - serverless-finch
  - serverless-single-page-app-plugin

custom:
  ## Serverless-finch configuration
  client:
    bucketName: shop-angular-cloudfront3850
    distributionFolder: dist/app
    indexDocument: index.html
    manageResources: false
  ## Serverless-single-page-app-plugin configuration:
  s3LocalPath: ${self:custom.client.distributionFolder}/
  s3BucketName: ${self:custom.client.bucketName}
  autoswagger:
    title: "Videogames product store API"
    typefiles:
      - ./src/types/api-types.d.ts

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
package:
  include:
    - dist/**
  #    - include-me-dir/**
  patterns:
    - "!node_modules/**"
    - "!e2e/**"
    - "!etc/**"
    - "!.git/**"
    - "!.vscode/**"
    - "!.husky/**"
    - "!.angular/**"
  # exclude:
  #   - node_modules/**
  #   - e2e/**
  #   - etc/**
  #   - .git/**
  #   - .vscode/**
  #   - .husky/**
  #   - .angular/**

functions:
  getProducts:
    handler: src/lambdas/getProducts.handler
    events:
      - httpApi:
          path: /products
          method: get
          summary: Get all products
          description: Retrieves all products stored on the DB
          swaggerTags: Products
          responses:
            "200":
              description: Successfully returned all product data
              # bodyType: helloPostResponse // This is to add types definition or example for this response
            "4XX":
              description: Bad request
            "5XX":
              description: Server error
  getProductById:
    handler: src/lambdas/getProductById.handler
    events:
      - httpApi:
          path: /products/{productId}
          method: get
          summary: Get product by ID
          description: Gets one specific product based on his ID
          swaggerTags: Products
          responses:
            "200":
              description: Successfully returned the product data
            "4XX":
              description: Bad request
            "5XX":
              description: Server error
  createProduct:
    handler: src/lambdas/createProduct.handler
    events:
      - httpApi:
          path: /products
          method: post
          summary: Saves product item into DB
          swaggerTags: Products
          bodyType: Products
          responses:
            "200":
              description: Successfully created new product data
            "4XX":
              description: Bad request
            "5XX":
              description: Server error
  importProductsFile:
    handler: src/lambdas/importProductsFile.handler
    events:
      - httpApi:
          path: /import
          method: get
          summary: Returns a signed URL to be used to upload a CSV file, signed url its valid for only 1 minute.
          swaggerTags: Products File
          queryStringParameters:
            name:
              required: true
              type: string
              description: The file name to generate the signedURL
          responses:
            "200":
              description: Successfully returned signed URL
            "4XX":
              description: Bad request
            "5XX":
              description: Server error
  importFileParser:
    handler: src/lambdas/importFileParser.handler
    events:
      - s3:
          bucket: ${self:custom.s3BucketName}-data
          event: s3:ObjectCreated:*
          rules:
            - prefix: uploaded/
          existing: true
  catalogBatchProcess:
    handler: src/lambdas/catalogBatchProcess.handler
    events:
      - sqs:
          arn: arn:aws:sqs:us-east-2:904597884993:catalogItemsQueue
          batchSize: 5
#functions:
#  hello:
#    handler: handler.hello
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
    ## Specifying the S3 Bucket
    WebAppS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.s3BucketName}
        AccessControl: BucketOwnerFullControl
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html
        # VersioningConfiguration:
        #   Status: Enabled
    MySNSProductTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: createProductTopic
    MySNSProductSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: Jonathan_Rangel@epam.com
        Protocol: email
        TopicArn:
          Ref: MySNSProductTopic

    ## Specifying the policies to make sure all files inside the Bucket are avaialble to CloudFront
    WebAppS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: WebAppS3Bucket
        PolicyDocument:
          Statement:
            - Sid: "AllowCloudFrontAccessIdentity"
              Effect: Allow
              Action: s3:GetObject
              Resource: arn:aws:s3:::${self:custom.s3BucketName}/*
              Principal:
                AWS:
                  Fn::Join:
                    - " "
                    - - "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity"
                      - !Ref OriginAccessIdentity

    OriginAccessIdentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: Access identity between CloudFront and S3 bucket

    ## Specifying the CloudFront Distribution to server your Web Application
    WebAppCloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
            - DomainName: ${self:custom.s3BucketName}.s3.amazonaws.com
              ## An identifier for the origin which must be unique within the distribution
              Id: myS3Origin
              ## In case you don't want to restrict the bucket access use CustomOriginConfig and remove S3OriginConfig
              S3OriginConfig:
                OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${OriginAccessIdentity}
              # CustomOriginConfig:
              #   HTTPPort: 80
              #   HTTPSPort: 443
              #   OriginProtocolPolicy: https-only
          Enabled: true
          IPV6Enabled: true
          HttpVersion: http2
          ## Uncomment the following section in case you are using a custom domain
          # Aliases:
          # - mysite.example.com
          DefaultRootObject: index.html
          ## Since the Single Page App is taking care of the routing we need to make sure ever path is served with index.html
          ## The only exception are files that actually exist e.h. app.js, reset.css
          CustomErrorResponses:
            - ErrorCode: 404
              ResponseCode: 200
              ResponsePagePath: /index.html
          DefaultCacheBehavior:
            AllowedMethods: ["GET", "HEAD", "OPTIONS"]
            CachedMethods: ["GET", "HEAD", "OPTIONS"]
            ForwardedValues:
              Headers:
                - Access-Control-Request-Headers
                - Access-Control-Request-Method
                - Origin
                - Authorization
              ## Defining if and how the QueryString and Cookies are forwarded to the origin which in this case is S3
              QueryString: false
              Cookies:
                Forward: none
            ## The origin id defined above
            TargetOriginId: myS3Origin
            ## The protocol that users can use to access the files in the origin. To allow HTTP use `allow-all`
            ViewerProtocolPolicy: redirect-to-https
            Compress: true
            DefaultTTL: 0
          ## The certificate to use when viewers use HTTPS to request objects.
          ViewerCertificate:
            CloudFrontDefaultCertificate: true
          ## Uncomment the following section in case you want to enable logging for CloudFront requests
          # Logging:
          #   IncludeCookies: 'false'
          #   Bucket: mylogs.s3.amazonaws.com
          #   Prefix: myprefix

  ## In order to print out the hosted domain via `serverless info` we need to define the DomainName output for CloudFormation
  Outputs:
    WebAppS3BucketOutput:
      Value:
        "Ref": WebAppS3Bucket
    WebAppCloudFrontDistributionOutput:
      Value:
        "Fn::GetAtt": [WebAppCloudFrontDistribution, DomainName]
